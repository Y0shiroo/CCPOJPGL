import java.awt.CardLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class ApplicantProcess extends JFrame {

    private JLayeredPane layeredPane;
    private JPanel panel1;
    private JPanel panel2;
    private JPanel panel3;
    private JTable App_table;
    private DefaultTableModel model;
    private JTextField searchField;
    private SearchFrame searchFrame;
    private ExecutiveDash executiveDash;

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    ApplicantProcess frame = new ApplicantProcess();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public ApplicantProcess() {
        initialize();
        searchFrame = new SearchFrame();
        executiveDash = new ExecutiveDash();
    }

    private void initialize() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 1026, 645);
        setLocationRelativeTo(null);
        getContentPane().setLayout(null);

        layeredPane = new JLayeredPane();
        layeredPane.setBounds(222, 123, 798, 494);
        getContentPane().add(layeredPane);
        layeredPane.setLayout(new CardLayout(0, 0));

        model = new DefaultTableModel();
        App_table = new JTable();
        App_table.setModel(model);
        App_table.setEnabled(false);
        App_table.setFocusable(false);
        App_table.setRowSelectionAllowed(false);
        App_table.getTableHeader().setReorderingAllowed(false);
        App_table.getTableHeader().setResizingAllowed(false);
        Object[] column = { "Position Code", "Job Title", "Responsibilities", "Salary" };
        model.setColumnIdentifiers(column);
        final Object[] row = new Object[4];

        JScrollPane scrollPane = new JScrollPane(App_table);
        scrollPane.setBounds(45, 70, 726, 404);

        panel1 = new JPanel();
        panel1.setLayout(null);
        panel1.add(scrollPane);

        layeredPane.add(panel1, "panel1");

        panel2 = new JPanel();
        panel2.setLayout(null);

        JLabel lblNewLabel_1 = new JLabel("Panel2");
        lblNewLabel_1.setBounds(378, 5, 41, 16);
        panel2.add(lblNewLabel_1);

        searchField = new JTextField();
        searchField.setBounds(33, 65, 335, 46);
        panel2.add(searchField);
        searchField.setColumns(10);

        JButton btn_Search = new JButton("Search");
        btn_Search.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                searchPositionCode();
            }
        });
        btn_Search.setBounds(396, 75, 117, 29);
        panel2.add(btn_Search);

        JScrollPane scrollPane_1 = new JScrollPane();
        scroll.scrollPane_1.setBounds(33, 135, 731, 339);
        panel2.add(scrollPane_1);
            // Initialize the table with data
    model = new DefaultTableModel();
    App_table = new JTable();
    App_table.setModel(model);
    App_table.setEnabled(false);
    App_table.setFocusable(false);
    App_table.setRowSelectionAllowed(false);
    App_table.getTableHeader().setReorderingAllowed(false);
    App_table.getTableHeader().setResizingAllowed(false);
    Object[] columnNames = { "Position Code", "Job Title", "Responsibilities", "Salary" };
    model.setColumnIdentifiers(columnNames);
    loadData(); // Load data from file to table

    scrollPane_1.setViewportView(App_table);

    layeredPane.add(panel2, "panel2");

    panel3 = new JPanel();
    panel3.setLayout(null);

    JButton btn_Apply = new JButton("Apply");
    btn_Apply.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            applyForPosition();
        }
    });
    btn_Apply.setBounds(376, 75, 117, 29);
    panel3.add(btn_Apply);

    layeredPane.add(panel3, "panel3");

    JButton btn_Panel1 = new JButton("Panel1");
    btn_Panel1.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            CardLayout cardLayout = (CardLayout) layeredPane.getLayout();
            cardLayout.show(layeredPane, "panel1");
        }
    });
    btn_Panel1.setBounds(6, 5, 96, 29);
    getContentPane().add(btn_Panel1);

    JButton btn_Panel2 = new JButton("Panel2");
    btn_Panel2.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            CardLayout cardLayout = (CardLayout) layeredPane.getLayout();
            cardLayout.show(layeredPane, "panel2");
        }
    });
    btn_Panel2.setBounds(114, 5, 96, 29);
    getContentPane().add(btn_Panel2);

    JButton btn_Panel3 = new JButton("Panel3");
    btn_Panel3.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            CardLayout cardLayout = (CardLayout) layeredPane.getLayout();
            cardLayout.show(layeredPane, "panel3");
        }
    });
    btn_Panel3.setBounds(222, 5, 96, 29);
    getContentPane().add(btn_Panel3);

    JLabel lblNewLabel = new JLabel("APPCOUNT");
    lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
    lblNewLabel.setBounds(6, 45, 96, 16);
    getContentPane().add(lblNewLabel);

    JLabel countLabel = new JLabel("0");
    countLabel.setHorizontalAlignment(SwingConstants.CENTER);
    countLabel.setBounds(6, 65, 96, 16);
    getContentPane().add(countLabel);
    executiveDash.setCountLabel(countLabel);

    JButton btnOpenExecutiveDash = new JButton("Open Executive Dash");
    btnOpenExecutiveDash.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            executiveDash.setVisible(true);
        }
    });
    btnOpenExecutiveDash.setBounds(6, 91, 200, 29);
    getContentPane().add(btnOpenExecutiveDash);
}

private void searchPositionCode() {
    String searchCode = searchField.getText().trim();
    if (searchCode.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a position code to search.", "Empty Search Field",
                JOptionPane.WARNING_MESSAGE);
    } else {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        App_table.setRowSorter(sorter);
        RowFilter<DefaultTableModel, Object> filter = RowFilter.regexFilter(searchCode, 0);
        sorter.setRowFilter(filter);
    }
}

private void applyForPosition() {
    int selectedRow = App_table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a position to apply.", "No Position Selected",
                JOptionPane.WARNING_MESSAGE);
    } else {
        String positionCode = (String) App_table.getValueAt(selectedRow, 0);
        executiveDash.incrementCount();
        JOptionPane.showMessageDialog(this, "Successfully applied for position: " + positionCode, "Application Submitted",
                JOptionPane.INFORMATION_MESSAGE);
    }
}

private void loadData() {
    try (BufferedReader reader = new BufferedReader(new FileReader("data.txt"))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] data = line.split(",");
            model.addRow(data);
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
        public void run() {
            try {
                Application window = new Application();
                window.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    });
}
}
